/*! For license information please see main.js.LICENSE.txt */
!function(){"use strict";var e={};function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,i(r.key),r)}}function i(e){var n=function(e){if("object"!=t(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,"string");if("object"!=t(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==t(n)?n:n+""}e.p="";var r=function(){return e=function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=t.author,this._thumb=t.thumb,this._text=t.text,this._kwh=t.kwh,this._template=n,this._index=i},(t=[{key:"_getTemplate",value:function(){return document.querySelector(this._template).content.querySelector(".quotes__cardbox").cloneNode(!0)}},{key:"generateCard",value:function(e){return this._element=this._getTemplate(),this._element.querySelector(".quotes__cardtext").textContent=this._text,this._element.querySelector(".quotes__cardauthor-img").src=this._thumb,this._element.querySelector(".quotes__cardauthor-infos-name").textContent=this._name,this._element.querySelector(".quotes__cardauthor-infos-subname").textContent=this._kwh,null!==this._index&&this._element.setAttribute("id","quote_".concat(this._index)),this._index===e&&this._element.classList.add("quotes__cardbox_focus"),this._element}}])&&n(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}(),o=e.p+"b6f0c903aa5e1d1d6e52.png",a=e.p+"5fa487d3ae1a9aa3decb.png",s=e.p+"5dece63a26297b9b3fbc.png",c=e.p+"51ca6965fbebe927a76d.png";function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}var l=function(e){return"object"===u(window.Node)?e instanceof window.Node:null!==e&&"object"===u(e)&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName};function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}var f=function(e,t){if(void 0===t&&(t=document),e instanceof Array)return e.filter(l);if(l(e))return[e];if(n=e,i=Object.prototype.toString.call(n),"object"===d(window.NodeList)?n instanceof window.NodeList:null!==n&&"object"===d(n)&&"number"==typeof n.length&&/^\[object (HTMLCollection|NodeList|Object)\]$/.test(i)&&(0===n.length||l(n[0])))return Array.prototype.slice.call(e);var n,i;if("string"==typeof e)try{var r=t.querySelectorAll(e);return Array.prototype.slice.call(r)}catch(e){return[]}return[]};function h(e){if(e.constructor!==Array)throw new TypeError("Expected array.");if(16===e.length)return e;if(6===e.length){var t=m();return t[0]=e[0],t[1]=e[1],t[4]=e[2],t[5]=e[3],t[12]=e[4],t[13]=e[5],t}throw new RangeError("Expected array with either 6 or 16 values.")}function m(){for(var e=[],t=0;t<16;t++)t%5==0?e.push(1):e.push(0);return e}function p(e,t){for(var n=h(e),i=h(t),r=[],o=0;o<4;o++)for(var a=[n[o],n[o+4],n[o+8],n[o+12]],s=0;s<4;s++){var c=4*s,u=[i[c],i[c+1],i[c+2],i[c+3]],l=a[0]*u[0]+a[1]*u[1]+a[2]*u[2]+a[3]*u[3];r[o+c]=l}return r}function g(e){if("string"==typeof e){var t=e.match(/matrix(3d)?\(([^)]+)\)/);if(t)return h(t[2].split(", ").map(parseFloat))}return m()}function y(e,t){var n=m();return n[0]=e,n[5]="number"==typeof t?t:e,n}var v,b=(v=Date.now(),function(e){var t=Date.now();t-v>16?(v=t,e(t)):setTimeout((function(){return b(e)}),0)}),_=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||b,w={delay:0,distance:"0",duration:600,easing:"cubic-bezier(0.5, 0, 0, 1)",interval:0,opacity:0,origin:"bottom",rotate:{x:0,y:0,z:0},scale:1,cleanup:!1,container:document.documentElement,desktop:!0,mobile:!0,reset:!1,useDelay:"always",viewFactor:0,viewOffset:{top:0,right:0,bottom:0,left:0},afterReset:function(){},afterReveal:function(){},beforeReset:function(){},beforeReveal:function(){}},x=function(){document.documentElement.classList.add("sr"),document.body?document.body.style.height="100%":document.addEventListener("DOMContentLoaded",(function(){document.body.style.height="100%"}))},q=function(){return document.documentElement.classList.remove("sr"),{clean:function(){},destroy:function(){},reveal:function(){},sync:function(){},get noop(){return!0}}};function k(e){return null!==e&&e instanceof Object&&(e.constructor===Object||"[object Object]"===Object.prototype.toString.call(e))}function E(e,t){if(k(e))return Object.keys(e).forEach((function(n){return t(e[n],n,e)}));if(e instanceof Array)return e.forEach((function(n,i){return t(n,i,e)}));throw new TypeError("Expected either an array or object literal.")}function S(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];if(this.constructor.debug&&console){var i="%cScrollReveal: "+e;t.forEach((function(e){return i+="\n â€” "+e})),console.log(i,"color: #ea654b;")}}function T(){var e=this,t={active:[],stale:[]},n={active:[],stale:[]},i={active:[],stale:[]};try{E(f("[data-sr-id]"),(function(e){var n=parseInt(e.getAttribute("data-sr-id"));t.active.push(n)}))}catch(e){throw e}E(this.store.elements,(function(e){-1===t.active.indexOf(e.id)&&t.stale.push(e.id)})),E(t.stale,(function(t){return delete e.store.elements[t]})),E(this.store.elements,(function(e){-1===i.active.indexOf(e.containerId)&&i.active.push(e.containerId),e.hasOwnProperty("sequence")&&-1===n.active.indexOf(e.sequence.id)&&n.active.push(e.sequence.id)})),E(this.store.containers,(function(e){-1===i.active.indexOf(e.id)&&i.stale.push(e.id)})),E(i.stale,(function(t){var n=e.store.containers[t].node;n.removeEventListener("scroll",e.delegate),n.removeEventListener("resize",e.delegate),delete e.store.containers[t]})),E(this.store.sequences,(function(e){-1===n.active.indexOf(e.id)&&n.stale.push(e.id)})),E(n.stale,(function(t){return delete e.store.sequences[t]}))}var j=function(){var e={},t=document.documentElement.style;function n(n,i){if(void 0===i&&(i=t),n&&"string"==typeof n){if(e[n])return e[n];if("string"==typeof i[n])return e[n]=n;if("string"==typeof i["-webkit-"+n])return e[n]="-webkit-"+n;throw new RangeError('Unable to find "'+n+'" style property.')}throw new TypeError("Expected a string.")}return n.clearCache=function(){return e={}},n}();function O(e){var t=window.getComputedStyle(e.node),n=t.position,i=e.config,r={},o=(e.node.getAttribute("style")||"").match(/[\w-]+\s*:\s*[^;]+\s*/gi)||[];r.computed=o?o.map((function(e){return e.trim()})).join("; ")+";":"",r.generated=o.some((function(e){return e.match(/visibility\s?:\s?visible/i)}))?r.computed:o.concat(["visibility: visible"]).map((function(e){return e.trim()})).join("; ")+";";var a,s,c,u=parseFloat(t.opacity),l=isNaN(parseFloat(i.opacity))?parseFloat(t.opacity):parseFloat(i.opacity),d={computed:u!==l?"opacity: "+u+";":"",generated:u!==l?"opacity: "+l+";":""},f=[];if(parseFloat(i.distance)){var h="top"===i.origin||"bottom"===i.origin?"Y":"X",v=i.distance;"top"!==i.origin&&"left"!==i.origin||(v=/^-/.test(v)?v.substr(1):"-"+v);var b=v.match(/(^-?\d+\.?\d?)|(em$|px$|%$)/g),_=b[0];switch(b[1]){case"em":v=parseInt(t.fontSize)*_;break;case"px":v=_;break;case"%":v="Y"===h?e.node.getBoundingClientRect().height*_/100:e.node.getBoundingClientRect().width*_/100;break;default:throw new RangeError("Unrecognized or missing distance unit.")}"Y"===h?f.push(function(e){var t=m();return t[13]=e,t}(v)):f.push(function(e){var t=m();return t[12]=e,t}(v))}i.rotate.x&&f.push((a=i.rotate.x,s=Math.PI/180*a,(c=m())[5]=c[10]=Math.cos(s),c[6]=c[9]=Math.sin(s),c[9]*=-1,c)),i.rotate.y&&f.push(function(e){var t=Math.PI/180*e,n=m();return n[0]=n[10]=Math.cos(t),n[2]=n[8]=Math.sin(t),n[2]*=-1,n}(i.rotate.y)),i.rotate.z&&f.push(function(e){var t=Math.PI/180*e,n=m();return n[0]=n[5]=Math.cos(t),n[1]=n[4]=Math.sin(t),n[4]*=-1,n}(i.rotate.z)),1!==i.scale&&(0===i.scale?f.push(y(2e-4)):f.push(y(i.scale)));var w={};if(f.length){w.property=j("transform"),w.computed={raw:t[w.property],matrix:g(t[w.property])},f.unshift(w.computed.matrix);var x=f.reduce(p);w.generated={initial:w.property+": matrix3d("+x.join(", ")+");",final:w.property+": matrix3d("+w.computed.matrix.join(", ")+");"}}else w.generated={initial:"",final:""};var q={};if(d.generated||w.generated.initial){q.property=j("transition"),q.computed=t[q.property],q.fragments=[];var k=i.delay,E=i.duration,S=i.easing;d.generated&&q.fragments.push({delayed:"opacity "+E/1e3+"s "+S+" "+k/1e3+"s",instant:"opacity "+E/1e3+"s "+S+" 0s"}),w.generated.initial&&q.fragments.push({delayed:w.property+" "+E/1e3+"s "+S+" "+k/1e3+"s",instant:w.property+" "+E/1e3+"s "+S+" 0s"}),q.computed&&!q.computed.match(/all 0s|none 0s/)&&q.fragments.unshift({delayed:q.computed,instant:q.computed});var T=q.fragments.reduce((function(e,t,n){return e.delayed+=0===n?t.delayed:", "+t.delayed,e.instant+=0===n?t.instant:", "+t.instant,e}),{delayed:"",instant:""});q.generated={delayed:q.property+": "+T.delayed+";",instant:q.property+": "+T.instant+";"}}else q.generated={delayed:"",instant:""};return{inline:r,opacity:d,position:n,transform:w,transition:q}}function L(e,t){t.split(";").forEach((function(t){var n=t.split(":"),i=n[0],r=n.slice(1);i&&r&&(e.style[i.trim()]=r.join(":"))}))}function P(e){var t,n=this;try{E(f(e),(function(e){var i=e.getAttribute("data-sr-id");if(null!==i){t=!0;var r=n.store.elements[i];r.callbackTimer&&window.clearTimeout(r.callbackTimer.clock),L(r.node,r.styles.inline.generated),e.removeAttribute("data-sr-id"),delete n.store.elements[i]}}))}catch(e){return S.call(this,"Clean failed.",e.message)}if(t)try{T.call(this)}catch(e){return S.call(this,"Clean failed.",e.message)}}function A(){var e=this;E(this.store.elements,(function(e){L(e.node,e.styles.inline.generated),e.node.removeAttribute("data-sr-id")})),E(this.store.containers,(function(t){var n=t.node===document.documentElement?window:t.node;n.removeEventListener("scroll",e.delegate),n.removeEventListener("resize",e.delegate)})),this.store={containers:{},elements:{},history:[],sequences:{}}}function M(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];if(k(e))return E(t,(function(t){E(t,(function(t,n){k(t)?(e[n]&&k(e[n])||(e[n]={}),M(e[n],t)):e[n]=t}))})),e;throw new TypeError("Target must be an object literal.")}function R(e){return void 0===e&&(e=navigator.userAgent),/Android|iPhone|iPad|iPod/i.test(e)}var C,I=(C=0,function(){return C++});function N(){var e=this;T.call(this),E(this.store.elements,(function(e){var t=[e.styles.inline.generated];e.visible?(t.push(e.styles.opacity.computed),t.push(e.styles.transform.generated.final),e.revealed=!0):(t.push(e.styles.opacity.generated),t.push(e.styles.transform.generated.initial),e.revealed=!1),L(e.node,t.filter((function(e){return""!==e})).join(" "))})),E(this.store.containers,(function(t){var n=t.node===document.documentElement?window:t.node;n.addEventListener("scroll",e.delegate),n.addEventListener("resize",e.delegate)})),this.delegate(),this.initTimeout=null}function W(e,t){void 0===t&&(t={});var n=t.pristine||this.pristine,i="always"===e.config.useDelay||"onload"===e.config.useDelay&&n||"once"===e.config.useDelay&&!e.seen,r=e.visible&&!e.revealed,o=!e.visible&&e.revealed&&e.config.reset;return t.reveal||r?z.call(this,e,i):t.reset||o?F.call(this,e):void 0}function z(e,t){var n=[e.styles.inline.generated,e.styles.opacity.computed,e.styles.transform.generated.final];t?n.push(e.styles.transition.generated.delayed):n.push(e.styles.transition.generated.instant),e.revealed=e.seen=!0,L(e.node,n.filter((function(e){return""!==e})).join(" ")),D.call(this,e,t)}function F(e){var t=[e.styles.inline.generated,e.styles.opacity.generated,e.styles.transform.generated.initial,e.styles.transition.generated.instant];e.revealed=!1,L(e.node,t.filter((function(e){return""!==e})).join(" ")),D.call(this,e)}function D(e,t){var n=this,i=t?e.config.duration+e.config.delay:e.config.duration,r=e.revealed?e.config.beforeReveal:e.config.beforeReset,o=e.revealed?e.config.afterReveal:e.config.afterReset,a=0;e.callbackTimer&&(a=Date.now()-e.callbackTimer.start,window.clearTimeout(e.callbackTimer.clock)),r(e.node),e.callbackTimer={start:Date.now(),clock:window.setTimeout((function(){o(e.node),e.callbackTimer=null,e.revealed&&!e.config.reset&&e.config.cleanup&&P.call(n,e.node)}),i-a)}}function H(e,t){if(void 0===t&&(t=this.pristine),!e.visible&&e.revealed&&e.config.reset)return W.call(this,e,{reset:!0});var n=this.store.sequences[e.sequence.id],i=e.sequence.index;if(n){var r=new Y(n,"visible",this.store),o=new Y(n,"revealed",this.store);if(n.models={visible:r,revealed:o},!o.body.length){var a=n.members[r.body[0]],s=this.store.elements[a];if(s)return $.call(this,n,r.body[0],-1,t),$.call(this,n,r.body[0],1,t),W.call(this,s,{reveal:!0,pristine:t})}if(!n.blocked.head&&i===[].concat(o.head).pop()&&i>=[].concat(r.body).shift())return $.call(this,n,i,-1,t),W.call(this,e,{reveal:!0,pristine:t});if(!n.blocked.foot&&i===[].concat(o.foot).shift()&&i<=[].concat(r.body).pop())return $.call(this,n,i,1,t),W.call(this,e,{reveal:!0,pristine:t})}}function K(e){var t=Math.abs(e);if(isNaN(t))throw new RangeError("Invalid sequence interval.");this.id=I(),this.interval=Math.max(t,16),this.members=[],this.models={},this.blocked={head:!1,foot:!1}}function Y(e,t,n){var i=this;this.head=[],this.body=[],this.foot=[],E(e.members,(function(e,r){var o=n.elements[e];o&&o[t]&&i.body.push(r)})),this.body.length&&E(e.members,(function(e,r){var o=n.elements[e];o&&!o[t]&&(r<i.body[0]?i.head.push(r):i.foot.push(r))}))}function $(e,t,n,i){var r=this,o=["head",null,"foot"][1+n],a=e.members[t+n],s=this.store.elements[a];e.blocked[o]=!0,setTimeout((function(){e.blocked[o]=!1,s&&H.call(r,s,i)}),e.interval)}function B(e,t,n){var i=this;void 0===t&&(t={}),void 0===n&&(n=!1);var r,o=[],a=t.interval||w.interval;try{a&&(r=new K(a));var s=f(e);if(!s.length)throw new Error("Invalid reveal target.");var c=s.reduce((function(e,n){var a={},s=n.getAttribute("data-sr-id");s?(M(a,i.store.elements[s]),L(a.node,a.styles.inline.computed)):(a.id=I(),a.node=n,a.seen=!1,a.revealed=!1,a.visible=!1);var c=M({},a.config||i.defaults,t);if(!c.mobile&&R()||!c.desktop&&!R())return s&&P.call(i,a),e;var u,l=f(c.container)[0];if(!l)throw new Error("Invalid container.");return l.contains(n)?(u=function(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];var i=null;return E(t,(function(t){E(t,(function(t){null===i&&t.node===e&&(i=t.id)}))})),i}(l,o,i.store.containers),null===u&&(u=I(),o.push({id:u,node:l})),a.config=c,a.containerId=u,a.styles=O(a),r&&(a.sequence={id:r.id,index:r.members.length},r.members.push(a.id)),e.push(a),e):e}),[]);E(c,(function(e){i.store.elements[e.id]=e,e.node.setAttribute("data-sr-id",e.id)}))}catch(e){return S.call(this,"Reveal failed.",e.message)}E(o,(function(e){i.store.containers[e.id]={id:e.id,node:e.node}})),r&&(this.store.sequences[r.id]=r),!0!==n&&(this.store.history.push({target:e,options:t}),this.initTimeout&&window.clearTimeout(this.initTimeout),this.initTimeout=window.setTimeout(N.bind(this),0))}function V(){var e=this;E(this.store.history,(function(t){B.call(e,t.target,t.options,!0)})),N.call(this)}var U,X,J,Q,G,Z,ee,te,ne=Math.sign||function(e){return(e>0)-(e<0)||+e};function ie(e,t){var n=t?e.node.clientHeight:e.node.offsetHeight,i=t?e.node.clientWidth:e.node.offsetWidth,r=0,o=0,a=e.node;do{isNaN(a.offsetTop)||(r+=a.offsetTop),isNaN(a.offsetLeft)||(o+=a.offsetLeft),a=a.offsetParent}while(a);return{bounds:{top:r,right:o+i,bottom:r+n,left:o},height:n,width:i}}function re(e){var t,n;return e.node===document.documentElement?(t=window.pageYOffset,n=window.pageXOffset):(t=e.node.scrollTop,n=e.node.scrollLeft),{top:t,left:n}}function oe(e){void 0===e&&(e={});var t=this.store.containers[e.containerId];if(t){var n=Math.max(0,Math.min(1,e.config.viewFactor)),i=e.config.viewOffset,r=e.geometry.bounds.top+e.geometry.height*n,o=e.geometry.bounds.right-e.geometry.width*n,a=e.geometry.bounds.bottom-e.geometry.height*n,s=e.geometry.bounds.left+e.geometry.width*n,c=t.geometry.bounds.top+t.scroll.top+i.top,u=t.geometry.bounds.right+t.scroll.left-i.right,l=t.geometry.bounds.bottom+t.scroll.top-i.bottom,d=t.geometry.bounds.left+t.scroll.left+i.left;return r<l&&o>d&&a>c&&s<u||"fixed"===e.styles.position}}function ae(e,t){var n=this;void 0===e&&(e={type:"init"}),void 0===t&&(t=this.store.elements),_((function(){var i="init"===e.type||"resize"===e.type;E(n.store.containers,(function(e){i&&(e.geometry=ie.call(n,e,!0));var t=re.call(n,e);e.scroll&&(e.direction={x:ne(t.left-e.scroll.left),y:ne(t.top-e.scroll.top)}),e.scroll=t})),E(t,(function(e){(i||void 0===e.geometry)&&(e.geometry=ie.call(n,e)),e.visible=oe.call(n,e)})),E(t,(function(e){e.sequence?H.call(n,e):W.call(n,e)})),n.pristine=!1}))}function se(e){var t;if(void 0===e&&(e={}),void 0===this||Object.getPrototypeOf(this)!==se.prototype)return new se(e);if(!se.isSupported())return S.call(this,"Instantiation failed.","This browser is not supported."),q();try{t=M({},Z||w,e)}catch(e){return S.call(this,"Invalid configuration.",e.message),q()}try{if(!f(t.container)[0])throw new Error("Invalid container.")}catch(e){return S.call(this,e.message),q()}return!(Z=t).mobile&&R()||!Z.desktop&&!R()?(S.call(this,"This device is disabled.","desktop: "+Z.desktop,"mobile: "+Z.mobile),q()):(x(),this.store={containers:{},elements:{},history:[],sequences:{}},this.pristine=!0,U=U||ae.bind(this),X=X||A.bind(this),J=J||B.bind(this),Q=Q||P.bind(this),G=G||V.bind(this),Object.defineProperty(this,"delegate",{get:function(){return U}}),Object.defineProperty(this,"destroy",{get:function(){return X}}),Object.defineProperty(this,"reveal",{get:function(){return J}}),Object.defineProperty(this,"clean",{get:function(){return Q}}),Object.defineProperty(this,"sync",{get:function(){return G}}),Object.defineProperty(this,"defaults",{get:function(){return Z}}),Object.defineProperty(this,"version",{get:function(){return"4.0.9"}}),Object.defineProperty(this,"noop",{get:function(){return!1}}),te||(te=this))}se.isSupported=function(){return function(){var e=document.documentElement.style;return"transform"in e||"WebkitTransform"in e}()&&function(){var e=document.documentElement.style;return"transition"in e||"WebkitTransition"in e}()},Object.defineProperty(se,"debug",{get:function(){return ee||!1},set:function(e){return ee="boolean"==typeof e?e:ee}}),se();var ce=se({reset:!0});ce.reveal(".header__title",{duration:1500,distance:"90px",origin:"left"}),ce.reveal(".header__subtitle",{duration:1500,distance:"90px",origin:"left",delay:150}),ce.reveal(".header__button",{duration:1500,distance:"90px",origin:"left",delay:250}),ce.reveal(".header__quote-content",{duration:1500,distance:"90px",origin:"left",delay:500}),ce.reveal(".header__backgroundImage",{duration:1500,distance:"90px",origin:"right"}),ce.reveal(".pickthesun__pretitle",{duration:2500,distance:"50px",origin:"bottom"}),ce.reveal(".pickthesun__title",{duration:2500,distance:"50px",origin:"bottom",delay:50}),ce.reveal(".pickthesun__main-text",{duration:2500,distance:"50px",origin:"bottom",delay:100}),ce.reveal(".pickthesun__main-image",{duration:3e3,distance:"50px",origin:"bottom",delay:150}),ce.reveal(".pickthesun__main-image-mobile",{duration:3e3,distance:"50px",origin:"bottom",delay:150}),ce.reveal(".services__placeholderimg",{duration:3e3,distance:"50px",origin:"left"}),ce.reveal(".services__grid-pretitle",{duration:2e3,distance:"50px",origin:"right",delay:500}),ce.reveal(".services__grid-title",{duration:2e3,distance:"50px",origin:"right",delay:500}),ce.reveal(".services__grid-main-text",{duration:2e3,distance:"50px",origin:"right",delay:500}),ce.reveal(".services__grid-1",{duration:1e3,distance:"50px",origin:"right",delay:500}),ce.reveal(".services__grid-2",{duration:2e3,distance:"50px",origin:"right",delay:500}),ce.reveal(".services__grid-3",{duration:3e3,distance:"50px",origin:"right",delay:500}),ce.reveal(".services__grid-4",{duration:4e3,distance:"50px",origin:"right",delay:500}),ce.reveal(".features__placeholderimg",{duration:3e3,distance:"50px",origin:"right"}),ce.reveal(".features__grid-pretitle",{duration:2e3,distance:"50px",origin:"left"}),ce.reveal(".features__grid-title",{duration:2e3,distance:"50px",origin:"left"}),ce.reveal(".features__grid-main-text",{duration:2e3,distance:"50px",origin:"left"}),ce.reveal(".features__grid-1",{duration:1e3,distance:"50px",origin:"left",delay:500}),ce.reveal(".features__grid-2",{duration:2e3,distance:"50px",origin:"left",delay:500}),ce.reveal(".features__grid-3",{duration:3e3,distance:"50px",origin:"left",delay:500}),ce.reveal(".features__grid-4",{duration:4e3,distance:"50px",origin:"left",delay:500}),ce.reveal(".quotes__infos",{duration:2e3,distance:"50px",origin:"bottom"}),ce.reveal(".quotes__button",{duration:2e3,distance:"50px",origin:"bottom",delay:500}),ce.reveal(".quotes__cards",{duration:2e3,distance:"50px",origin:"bottom",delay:500}),ce.reveal(".quotes__buttons",{duration:3e3,distance:"50px",origin:"bottom",delay:500}),ce.reveal(".getthesun__header-title",{duration:2e3,distance:"50px",origin:"bottom"}),ce.reveal(".getthesun__button",{duration:2e3,distance:"50px",origin:"bottom",delay:500}),ce.reveal(".getthesun__button-info",{duration:2e3,distance:"50px",origin:"bottom",delay:500}),ce.reveal(".getthesun__macimg",{duration:2e3,distance:"50px",origin:"bottom",delay:500});var ue=document.querySelector(".quotes__cards"),le={right:document.querySelector(".quotes__arrowbutton-right"),left:document.querySelector(".quotes__arrowbutton-left")},de=[{text:"Purus maecenas quis elit eu, aliquet. Tellus porttitor ut sollicitudin sit non fringilla. Quam nunc volutpat senectus neque eget amet pharetra, euismod. Tempus, nunc, molestie imperdiet curabitur commodo euismod.",author:"Jane Cooper",kwh:"10KWh",thumb:o},{text:"Vehicula sit sit pharetra bibendum ut risus accumsan. Purus, in metus, enim, ipsum morbi euismod pellentesque. Mattis pharetra accumsan eget est mi enim, id. Sit quam tortor eu tellus non, in euismod integer.",author:"Ralph Edwards",kwh:"32KWh",thumb:a},{text:"Viverra lacus suspendisse elit, adipiscing orci, non turpis etiam sapien. Viverra blandit sem neque pretium. Duis enim semper fermentum consequat aenean libero. Blandit porta leo condimentum dolor, nisi, aliquet ante laoreet.",author:"Courtney Henry",kwh:"6KWh",thumb:s},{text:"Hendrerit augue ut nec, senectus quis integer netus. Sagittis fusce rhoncus magnis habitant amet amet. Egestas amet habitasse amet risus tellus ornare. Hendrerit augue ut nec, senectus. Mauris egestas feugiat leo vitae praesent neque, et.",author:"Cameron Williamson",kwh:"12KWh ",thumb:c},{text:"Hendrerit augue ut nec, senectus quis integer netus. Sagittis fusce rhoncus magnis habitant amet amet. Egestas amet habitasse amet risus tellus ornare. Hendrerit augue ut nec, senectus. Mauris egestas feugiat leo vitae praesent neque, et.",author:"Cameron Williamson",kwh:"12KWh ",thumb:c}],fe=0;de.forEach((function(e,t){var n=new r(e,"#template",t).generateCard(fe);ue.append(n)})),le.right.addEventListener("click",(function(){ue.querySelector("#quote_".concat(fe)).classList.remove("quotes__cardbox_focus"),fe==de.length-1?fe=0:fe+=1,ue.querySelector("#quote_".concat(fe)).classList.add("quotes__cardbox_focus"),window.innerWidth<=460?ue.style.translate="".concat(-363*fe-5*fe,"px"):ue.style.translate="".concat(-388*fe,"px")})),le.left.addEventListener("click",(function(){ue.querySelector("#quote_".concat(fe)).classList.remove("quotes__cardbox_focus"),0==fe?fe=de.length-1:fe-=1,ue.querySelector("#quote_".concat(fe)).classList.add("quotes__cardbox_focus"),window.innerWidth<=460?ue.style.translate="".concat(-363*fe-5*fe,"px"):ue.style.translate="".concat(-388*fe,"px")}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,